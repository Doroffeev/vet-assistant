{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { executeQuery } from \"../DatabaseService\";\nexport var addOperation = function () {\n  var _ref = _asyncToGenerator(function* (operation) {\n    var now = new Date().toISOString();\n    var result = yield executeQuery(\"INSERT INTO operations (\\n      animal_id, type, date, diagnosis, medicine, dose,\\n      bull, vaccine, executor_id, result, notes,\\n      created_at, updated_at\\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", [operation.animalId, operation.type, operation.date, operation.diagnosis || null, operation.medicine || null, operation.dose || null, operation.bull || null, operation.vaccine || null, operation.executorId || null, operation.result || null, operation.notes || null, now, now]);\n    return result.insertId;\n  });\n  return function addOperation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateOperation = function () {\n  var _ref2 = _asyncToGenerator(function* (operation) {\n    if (!operation.id) throw new Error('Operation ID is required for update');\n    var now = new Date().toISOString();\n    yield executeQuery(\"UPDATE operations SET\\n      animal_id = ?,\\n      type = ?,\\n      date = ?,\\n      diagnosis = ?,\\n      medicine = ?,\\n      dose = ?,\\n      bull = ?,\\n      vaccine = ?,\\n      executor_id = ?,\\n      result = ?,\\n      notes = ?,\\n      updated_at = ?\\n    WHERE id = ?\", [operation.animalId, operation.type, operation.date, operation.diagnosis || null, operation.medicine || null, operation.dose || null, operation.bull || null, operation.vaccine || null, operation.executorId || null, operation.result || null, operation.notes || null, now, operation.id]);\n  });\n  return function updateOperation(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteOperation = function () {\n  var _ref3 = _asyncToGenerator(function* (id) {\n    yield executeQuery('DELETE FROM operations WHERE id = ?', [id]);\n  });\n  return function deleteOperation(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getOperationById = function () {\n  var _ref4 = _asyncToGenerator(function* (id) {\n    var result = yield executeQuery(\"SELECT \\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\\n      bull, vaccine, executor_id as executorId, result, notes,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM operations WHERE id = ?\", [id]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n    return result.rows.item(0);\n  });\n  return function getOperationById(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getOperationsByAnimalId = function () {\n  var _ref5 = _asyncToGenerator(function* (animalId) {\n    var result = yield executeQuery(\"SELECT \\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\\n      bull, vaccine, executor_id as executorId, result, notes,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM operations\\n    WHERE animal_id = ?\\n    ORDER BY date DESC\", [animalId]);\n    var operations = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      operations.push(result.rows.item(i));\n    }\n    return operations;\n  });\n  return function getOperationsByAnimalId(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getOperationsByDateRange = function () {\n  var _ref6 = _asyncToGenerator(function* (startDate, endDate) {\n    var result = yield executeQuery(\"SELECT \\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\\n      bull, vaccine, executor_id as executorId, result, notes,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM operations\\n    WHERE date BETWEEN ? AND ?\\n    ORDER BY date DESC\", [startDate, endDate]);\n    var operations = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      operations.push(result.rows.item(i));\n    }\n    return operations;\n  });\n  return function getOperationsByDateRange(_x6, _x7) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getOperationsByTypeAndDateRange = function () {\n  var _ref7 = _asyncToGenerator(function* (type, startDate, endDate) {\n    var result = yield executeQuery(\"SELECT \\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\\n      bull, vaccine, executor_id as executorId, result, notes,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM operations\\n    WHERE type = ? AND date BETWEEN ? AND ?\\n    ORDER BY date DESC\", [type, startDate, endDate]);\n    var operations = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      operations.push(result.rows.item(i));\n    }\n    return operations;\n  });\n  return function getOperationsByTypeAndDateRange(_x8, _x9, _x10) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["executeQuery","addOperation","_ref","_asyncToGenerator","operation","now","Date","toISOString","result","animalId","type","date","diagnosis","medicine","dose","bull","vaccine","executorId","notes","insertId","_x","apply","arguments","updateOperation","_ref2","id","Error","_x2","deleteOperation","_ref3","_x3","getOperationById","_ref4","rows","length","item","_x4","getOperationsByAnimalId","_ref5","operations","i","push","_x5","getOperationsByDateRange","_ref6","startDate","endDate","_x6","_x7","getOperationsByTypeAndDateRange","_ref7","_x8","_x9","_x10"],"sources":["C:/vet-assistant/src/database/repositories/OperationRepository.ts"],"sourcesContent":["// src/database/repositories/OperationRepository.ts - Репозиторий для работы с операциями\r\nimport { executeQuery } from '../DatabaseService';\r\nimport { Operation } from '../../types';\r\n\r\nexport const addOperation = async (operation: Omit<Operation, 'id'>): Promise<number> => {\r\n  const now = new Date().toISOString();\r\n  const result = await executeQuery(\r\n    `INSERT INTO operations (\r\n      animal_id, type, date, diagnosis, medicine, dose,\r\n      bull, vaccine, executor_id, result, notes,\r\n      created_at, updated_at\r\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\r\n    [\r\n      operation.animalId,\r\n      operation.type,\r\n      operation.date,\r\n      operation.diagnosis || null,\r\n      operation.medicine || null,\r\n      operation.dose || null,\r\n      operation.bull || null,\r\n      operation.vaccine || null,\r\n      operation.executorId || null,\r\n      operation.result || null,\r\n      operation.notes || null,\r\n      now,\r\n      now\r\n    ]\r\n  );\r\n  \r\n  return result.insertId;\r\n};\r\n\r\nexport const updateOperation = async (operation: Operation): Promise<void> => {\r\n  if (!operation.id) throw new Error('Operation ID is required for update');\r\n  \r\n  const now = new Date().toISOString();\r\n  await executeQuery(\r\n    `UPDATE operations SET\r\n      animal_id = ?,\r\n      type = ?,\r\n      date = ?,\r\n      diagnosis = ?,\r\n      medicine = ?,\r\n      dose = ?,\r\n      bull = ?,\r\n      vaccine = ?,\r\n      executor_id = ?,\r\n      result = ?,\r\n      notes = ?,\r\n      updated_at = ?\r\n    WHERE id = ?`,\r\n    [\r\n      operation.animalId,\r\n      operation.type,\r\n      operation.date,\r\n      operation.diagnosis || null,\r\n      operation.medicine || null,\r\n      operation.dose || null,\r\n      operation.bull || null,\r\n      operation.vaccine || null,\r\n      operation.executorId || null,\r\n      operation.result || null,\r\n      operation.notes || null,\r\n      now,\r\n      operation.id\r\n    ]\r\n  );\r\n};\r\n\r\nexport const deleteOperation = async (id: number): Promise<void> => {\r\n  await executeQuery('DELETE FROM operations WHERE id = ?', [id]);\r\n};\r\n\r\nexport const getOperationById = async (id: number): Promise<Operation | null> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\r\n      bull, vaccine, executor_id as executorId, result, notes,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM operations WHERE id = ?`,\r\n    [id]\r\n  );\r\n  \r\n  if (result.rows.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return result.rows.item(0) as Operation;\r\n};\r\n\r\nexport const getOperationsByAnimalId = async (animalId: number): Promise<Operation[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\r\n      bull, vaccine, executor_id as executorId, result, notes,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM operations\r\n    WHERE animal_id = ?\r\n    ORDER BY date DESC`,\r\n    [animalId]\r\n  );\r\n  \r\n  const operations: Operation[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    operations.push(result.rows.item(i) as Operation);\r\n  }\r\n  \r\n  return operations;\r\n};\r\n\r\nexport const getOperationsByDateRange = async (\r\n  startDate: string,\r\n  endDate: string\r\n): Promise<Operation[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\r\n      bull, vaccine, executor_id as executorId, result, notes,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM operations\r\n    WHERE date BETWEEN ? AND ?\r\n    ORDER BY date DESC`,\r\n    [startDate, endDate]\r\n  );\r\n  \r\n  const operations: Operation[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    operations.push(result.rows.item(i) as Operation);\r\n  }\r\n  \r\n  return operations;\r\n};\r\n\r\nexport const getOperationsByTypeAndDateRange = async (\r\n  type: string,\r\n  startDate: string,\r\n  endDate: string\r\n): Promise<Operation[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, animal_id as animalId, type, date, diagnosis, medicine, dose,\r\n      bull, vaccine, executor_id as executorId, result, notes,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM operations\r\n    WHERE type = ? AND date BETWEEN ? AND ?\r\n    ORDER BY date DESC`,\r\n    [type, startDate, endDate]\r\n  );\r\n  \r\n  const operations: Operation[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    operations.push(result.rows.item(i) as Operation);\r\n  }\r\n  \r\n  return operations;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}