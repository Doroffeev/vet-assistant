{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar mockTx = {\n  executeSql: function executeSql(sql, params, successCallback, errorCallback) {\n    console.log('Mock executeSql:', sql);\n    if (successCallback) {\n      successCallback(mockTx, {\n        rows: {\n          length: 0,\n          item: function item() {\n            return {};\n          }\n        }\n      });\n    }\n  }\n};\nvar db = {\n  transaction: function transaction(txFunction, errorCallback, successCallback) {\n    console.log('Mock transaction called');\n    setTimeout(function () {\n      try {\n        txFunction(mockTx);\n        if (successCallback) {\n          console.log('Calling success callback after 1 second');\n          successCallback();\n        }\n      } catch (error) {\n        console.error('Error in transaction:', error);\n        if (errorCallback) {\n          errorCallback(error);\n        }\n      }\n    }, 1000);\n  }\n};\nexport var initDatabase = function () {\n  var _ref = _asyncToGenerator(function* () {\n    console.log('Mock initDatabase called');\n    return new Promise(function (resolve) {\n      console.log('Starting mock database initialization');\n      setTimeout(function () {\n        console.log('Mock database initialized successfully');\n        resolve(db);\n      }, 2000);\n    });\n  });\n  return function initDatabase() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getDatabase = function getDatabase() {\n  return db;\n};\nexport var executeQuery = function executeQuery(sql) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  console.log('Mock executeQuery:', sql, params);\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve({\n        rows: {\n          length: 0,\n          item: function item() {\n            return {};\n          }\n        },\n        insertId: 1\n      });\n    }, 500);\n  });\n};\nexport var createTables = function createTables(database) {\n  console.log('Mock createTables called');\n};","map":{"version":3,"names":["mockTx","executeSql","sql","params","successCallback","errorCallback","console","log","rows","length","item","db","transaction","txFunction","setTimeout","error","initDatabase","_ref","_asyncToGenerator","Promise","resolve","apply","arguments","getDatabase","executeQuery","undefined","insertId","createTables","database"],"sources":["C:/vet-assistant/src/database/DatabaseService.ts"],"sourcesContent":["// src/database/DatabaseService.ts - Полная версия\r\nimport { DB_NAME } from '../constants/appConstants';\r\n\r\n// Имитация типа WebSQLDatabase\r\ninterface MockDatabase {\r\n  transaction: (\r\n    txFunction: (tx: any) => void, \r\n    errorCallback?: (error: any) => boolean | void, \r\n    successCallback?: () => void\r\n  ) => void;\r\n}\r\n\r\n// Мок объект транзакции\r\nconst mockTx = {\r\n  executeSql: (\r\n    sql: string, \r\n    params: any[], \r\n    successCallback?: (tx: any, resultSet: any) => void,\r\n    errorCallback?: (tx: any, error: any) => boolean\r\n  ) => {\r\n    console.log('Mock executeSql:', sql);\r\n    if (successCallback) {\r\n      successCallback(mockTx, { rows: { length: 0, item: () => ({}) } });\r\n    }\r\n  }\r\n};\r\n\r\n// Мок объект базы данных\r\nlet db: MockDatabase = {\r\n  transaction: (txFunction, errorCallback, successCallback) => {\r\n    console.log('Mock transaction called');\r\n    setTimeout(() => {\r\n      try {\r\n        txFunction(mockTx);\r\n        if (successCallback) {\r\n          console.log('Calling success callback after 1 second');\r\n          successCallback();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in transaction:', error);\r\n        if (errorCallback) {\r\n          errorCallback(error);\r\n        }\r\n      }\r\n    }, 1000); // Симуляция асинхронности\r\n  }\r\n};\r\n\r\n// Инициализация БД\r\nexport const initDatabase = async (): Promise<MockDatabase> => {\r\n  console.log('Mock initDatabase called');\r\n  \r\n  return new Promise((resolve) => {\r\n    console.log('Starting mock database initialization');\r\n    \r\n    // Имитируем задержку открытия БД\r\n    setTimeout(() => {\r\n      console.log('Mock database initialized successfully');\r\n      resolve(db);\r\n    }, 2000);\r\n  });\r\n};\r\n\r\n// Получение экземпляра базы данных\r\nexport const getDatabase = (): MockDatabase => {\r\n  return db;\r\n};\r\n\r\n// Выполнение SQL-запроса\r\nexport const executeQuery = (\r\n  sql: string, \r\n  params: any[] = []\r\n): Promise<any> => {\r\n  console.log('Mock executeQuery:', sql, params);\r\n  \r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({ \r\n        rows: { \r\n          length: 0, \r\n          item: () => ({}) \r\n        },\r\n        insertId: 1 // Добавлено для поддержки операций добавления\r\n      });\r\n    }, 500);\r\n  });\r\n};\r\n\r\n// Заглушка для функции createTables\r\nexport const createTables = (database: MockDatabase): void => {\r\n  console.log('Mock createTables called');\r\n};"],"mappings":";AAaA,IAAMA,MAAM,GAAG;EACbC,UAAU,EAAE,SAAZA,UAAUA,CACRC,GAAW,EACXC,MAAa,EACbC,eAAmD,EACnDC,aAAgD,EAC7C;IACHC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,GAAG,CAAC;IACpC,IAAIE,eAAe,EAAE;MACnBA,eAAe,CAACJ,MAAM,EAAE;QAAEQ,IAAI,EAAE;UAAEC,MAAM,EAAE,CAAC;UAAEC,IAAI,EAAE,SAANA,IAAIA,CAAA;YAAA,OAAS,CAAC,CAAC;UAAA;QAAE;MAAE,CAAC,CAAC;IACpE;EACF;AACF,CAAC;AAGD,IAAIC,EAAgB,GAAG;EACrBC,WAAW,EAAE,SAAbA,WAAWA,CAAGC,UAAU,EAAER,aAAa,EAAED,eAAe,EAAK;IAC3DE,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCO,UAAU,CAAC,YAAM;MACf,IAAI;QACFD,UAAU,CAACb,MAAM,CAAC;QAClB,IAAII,eAAe,EAAE;UACnBE,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;UACtDH,eAAe,CAAC,CAAC;QACnB;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,IAAIV,aAAa,EAAE;UACjBA,aAAa,CAACU,KAAK,CAAC;QACtB;MACF;IACF,CAAC,EAAE,IAAI,CAAC;EACV;AACF,CAAC;AAGD,OAAO,IAAMC,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAmC;IAC7DZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAEvC,OAAO,IAAIY,OAAO,CAAC,UAACC,OAAO,EAAK;MAC9Bd,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MAGpDO,UAAU,CAAC,YAAM;QACfR,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrDa,OAAO,CAACT,EAAE,CAAC;MACb,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAAA,gBAZYK,YAAYA,CAAA;IAAA,OAAAC,IAAA,CAAAI,KAAA,OAAAC,SAAA;EAAA;AAAA,GAYxB;AAGD,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAuB;EAC7C,OAAOZ,EAAE;AACX,CAAC;AAGD,OAAO,IAAMa,YAAY,GAAG,SAAfA,YAAYA,CACvBtB,GAAW,EAEM;EAAA,IADjBC,MAAa,GAAAmB,SAAA,CAAAb,MAAA,QAAAa,SAAA,QAAAG,SAAA,GAAAH,SAAA,MAAG,EAAE;EAElBhB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,GAAG,EAAEC,MAAM,CAAC;EAE9C,OAAO,IAAIgB,OAAO,CAAC,UAACC,OAAO,EAAK;IAC9BN,UAAU,CAAC,YAAM;MACfM,OAAO,CAAC;QACNZ,IAAI,EAAE;UACJC,MAAM,EAAE,CAAC;UACTC,IAAI,EAAE,SAANA,IAAIA,CAAA;YAAA,OAAS,CAAC,CAAC;UAAA;QACjB,CAAC;QACDgB,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAGD,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,QAAsB,EAAW;EAC5DtB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}