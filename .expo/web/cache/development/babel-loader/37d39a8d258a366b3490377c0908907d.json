{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { executeQuery } from \"../DatabaseService\";\nexport var addMedicine = function () {\n  var _ref = _asyncToGenerator(function* (medicine) {\n    var now = new Date().toISOString();\n    var result = yield executeQuery(\"INSERT INTO medicines (\\n      name, active_ingredient, manufacturer, dosage, instructions, \\n      created_at, updated_at\\n    ) VALUES (?, ?, ?, ?, ?, ?, ?)\", [medicine.name, medicine.activeIngredient || null, medicine.manufacturer || null, medicine.dosage || null, medicine.instructions || null, now, now]);\n    return result.insertId;\n  });\n  return function addMedicine(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateMedicine = function () {\n  var _ref2 = _asyncToGenerator(function* (medicine) {\n    if (!medicine.id) throw new Error('Medicine ID is required for update');\n    var now = new Date().toISOString();\n    yield executeQuery(\"UPDATE medicines SET\\n      name = ?,\\n      active_ingredient = ?,\\n      manufacturer = ?,\\n      dosage = ?,\\n      instructions = ?,\\n      updated_at = ?\\n    WHERE id = ?\", [medicine.name, medicine.activeIngredient || null, medicine.manufacturer || null, medicine.dosage || null, medicine.instructions || null, now, medicine.id]);\n  });\n  return function updateMedicine(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteMedicine = function () {\n  var _ref3 = _asyncToGenerator(function* (id) {\n    yield executeQuery('DELETE FROM medicines WHERE id = ?', [id]);\n  });\n  return function deleteMedicine(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getMedicineById = function () {\n  var _ref4 = _asyncToGenerator(function* (id) {\n    var result = yield executeQuery(\"SELECT \\n      id, name, active_ingredient as activeIngredient, \\n      manufacturer, dosage, instructions,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM medicines WHERE id = ?\", [id]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n    return result.rows.item(0);\n  });\n  return function getMedicineById(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllMedicines = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var result = yield executeQuery(\"SELECT \\n      id, name, active_ingredient as activeIngredient, \\n      manufacturer, dosage, instructions,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM medicines\\n    ORDER BY name ASC\");\n    var medicines = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      medicines.push(result.rows.item(i));\n    }\n    return medicines;\n  });\n  return function getAllMedicines() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["executeQuery","addMedicine","_ref","_asyncToGenerator","medicine","now","Date","toISOString","result","name","activeIngredient","manufacturer","dosage","instructions","insertId","_x","apply","arguments","updateMedicine","_ref2","id","Error","_x2","deleteMedicine","_ref3","_x3","getMedicineById","_ref4","rows","length","item","_x4","getAllMedicines","_ref5","medicines","i","push"],"sources":["C:/vet-assistant/src/database/repositories/MedicineRepository.ts"],"sourcesContent":["// src/database/repositories/MedicineRepository.ts\r\nimport { executeQuery } from '../DatabaseService';\r\nimport { Medicine } from '../../types';\r\n\r\nexport const addMedicine = async (medicine: Omit<Medicine, 'id'>): Promise<number> => {\r\n  const now = new Date().toISOString();\r\n  const result = await executeQuery(\r\n    `INSERT INTO medicines (\r\n      name, active_ingredient, manufacturer, dosage, instructions, \r\n      created_at, updated_at\r\n    ) VALUES (?, ?, ?, ?, ?, ?, ?)`,\r\n    [\r\n      medicine.name,\r\n      medicine.activeIngredient || null,\r\n      medicine.manufacturer || null,\r\n      medicine.dosage || null,\r\n      medicine.instructions || null,\r\n      now,\r\n      now\r\n    ]\r\n  );\r\n  \r\n  return result.insertId;\r\n};\r\n\r\nexport const updateMedicine = async (medicine: Medicine): Promise<void> => {\r\n  if (!medicine.id) throw new Error('Medicine ID is required for update');\r\n  \r\n  const now = new Date().toISOString();\r\n  await executeQuery(\r\n    `UPDATE medicines SET\r\n      name = ?,\r\n      active_ingredient = ?,\r\n      manufacturer = ?,\r\n      dosage = ?,\r\n      instructions = ?,\r\n      updated_at = ?\r\n    WHERE id = ?`,\r\n    [\r\n      medicine.name,\r\n      medicine.activeIngredient || null,\r\n      medicine.manufacturer || null,\r\n      medicine.dosage || null,\r\n      medicine.instructions || null,\r\n      now,\r\n      medicine.id\r\n    ]\r\n  );\r\n};\r\n\r\nexport const deleteMedicine = async (id: number): Promise<void> => {\r\n  await executeQuery('DELETE FROM medicines WHERE id = ?', [id]);\r\n};\r\n\r\nexport const getMedicineById = async (id: number): Promise<Medicine | null> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, active_ingredient as activeIngredient, \r\n      manufacturer, dosage, instructions,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM medicines WHERE id = ?`,\r\n    [id]\r\n  );\r\n  \r\n  if (result.rows.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return result.rows.item(0) as Medicine;\r\n};\r\n\r\nexport const getAllMedicines = async (): Promise<Medicine[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, active_ingredient as activeIngredient, \r\n      manufacturer, dosage, instructions,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM medicines\r\n    ORDER BY name ASC`\r\n  );\r\n  \r\n  const medicines: Medicine[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    medicines.push(result.rows.item(i) as Medicine);\r\n  }\r\n  \r\n  return medicines;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}