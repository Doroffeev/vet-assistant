{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { executeQuery } from \"../DatabaseService\";\nexport var addDisease = function () {\n  var _ref = _asyncToGenerator(function* (disease) {\n    var now = new Date().toISOString();\n    var result = yield executeQuery(\"INSERT INTO diseases (\\n      name, description, symptoms, treatment, created_at, updated_at\\n    ) VALUES (?, ?, ?, ?, ?, ?)\", [disease.name, disease.description || null, disease.symptoms || null, disease.treatment || null, now, now]);\n    return result.insertId;\n  });\n  return function addDisease(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateDisease = function () {\n  var _ref2 = _asyncToGenerator(function* (disease) {\n    if (!disease.id) throw new Error('Disease ID is required for update');\n    var now = new Date().toISOString();\n    yield executeQuery(\"UPDATE diseases SET\\n      name = ?,\\n      description = ?,\\n      symptoms = ?,\\n      treatment = ?,\\n      updated_at = ?\\n    WHERE id = ?\", [disease.name, disease.description || null, disease.symptoms || null, disease.treatment || null, now, disease.id]);\n  });\n  return function updateDisease(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteDisease = function () {\n  var _ref3 = _asyncToGenerator(function* (id) {\n    yield executeQuery('DELETE FROM diseases WHERE id = ?', [id]);\n  });\n  return function deleteDisease(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getDiseaseById = function () {\n  var _ref4 = _asyncToGenerator(function* (id) {\n    var result = yield executeQuery(\"SELECT \\n      id, name, description, symptoms, treatment,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM diseases WHERE id = ?\", [id]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n    return result.rows.item(0);\n  });\n  return function getDiseaseById(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllDiseases = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var result = yield executeQuery(\"SELECT \\n      id, name, description, symptoms, treatment,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM diseases\\n    ORDER BY name ASC\");\n    var diseases = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      diseases.push(result.rows.item(i));\n    }\n    return diseases;\n  });\n  return function getAllDiseases() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["executeQuery","addDisease","_ref","_asyncToGenerator","disease","now","Date","toISOString","result","name","description","symptoms","treatment","insertId","_x","apply","arguments","updateDisease","_ref2","id","Error","_x2","deleteDisease","_ref3","_x3","getDiseaseById","_ref4","rows","length","item","_x4","getAllDiseases","_ref5","diseases","i","push"],"sources":["C:/vet-assistant/src/database/repositories/DiseaseRepository.ts"],"sourcesContent":["// src/database/repositories/DiseaseRepository.ts\r\nimport { executeQuery } from '../DatabaseService';\r\nimport { Disease } from '../../types';\r\n\r\nexport const addDisease = async (disease: Omit<Disease, 'id'>): Promise<number> => {\r\n  const now = new Date().toISOString();\r\n  const result = await executeQuery(\r\n    `INSERT INTO diseases (\r\n      name, description, symptoms, treatment, created_at, updated_at\r\n    ) VALUES (?, ?, ?, ?, ?, ?)`,\r\n    [\r\n      disease.name,\r\n      disease.description || null,\r\n      disease.symptoms || null,\r\n      disease.treatment || null,\r\n      now,\r\n      now\r\n    ]\r\n  );\r\n  \r\n  return result.insertId;\r\n};\r\n\r\nexport const updateDisease = async (disease: Disease): Promise<void> => {\r\n  if (!disease.id) throw new Error('Disease ID is required for update');\r\n  \r\n  const now = new Date().toISOString();\r\n  await executeQuery(\r\n    `UPDATE diseases SET\r\n      name = ?,\r\n      description = ?,\r\n      symptoms = ?,\r\n      treatment = ?,\r\n      updated_at = ?\r\n    WHERE id = ?`,\r\n    [\r\n      disease.name,\r\n      disease.description || null,\r\n      disease.symptoms || null,\r\n      disease.treatment || null,\r\n      now,\r\n      disease.id\r\n    ]\r\n  );\r\n};\r\n\r\nexport const deleteDisease = async (id: number): Promise<void> => {\r\n  await executeQuery('DELETE FROM diseases WHERE id = ?', [id]);\r\n};\r\n\r\nexport const getDiseaseById = async (id: number): Promise<Disease | null> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, description, symptoms, treatment,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM diseases WHERE id = ?`,\r\n    [id]\r\n  );\r\n  \r\n  if (result.rows.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return result.rows.item(0) as Disease;\r\n};\r\n\r\nexport const getAllDiseases = async (): Promise<Disease[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, description, symptoms, treatment,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM diseases\r\n    ORDER BY name ASC`\r\n  );\r\n  \r\n  const diseases: Disease[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    diseases.push(result.rows.item(i) as Disease);\r\n  }\r\n  \r\n  return diseases;\r\n};\r\n\r\n"],"mappings":";AACA,SAASA,YAAY;AAGrB,OAAO,IAAMC,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAA4B,EAAsB;IACjF,IAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,IAAMC,MAAM,SAASR,YAAY,kIAI/B,CACEI,OAAO,CAACK,IAAI,EACZL,OAAO,CAACM,WAAW,IAAI,IAAI,EAC3BN,OAAO,CAACO,QAAQ,IAAI,IAAI,EACxBP,OAAO,CAACQ,SAAS,IAAI,IAAI,EACzBP,GAAG,EACHA,GAAG,CAEP,CAAC;IAED,OAAOG,MAAM,CAACK,QAAQ;EACxB,CAAC;EAAA,gBAjBYZ,UAAUA,CAAAa,EAAA;IAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiBtB;AAED,OAAO,IAAMC,aAAa;EAAA,IAAAC,KAAA,GAAAf,iBAAA,CAAG,WAAOC,OAAgB,EAAoB;IACtE,IAAI,CAACA,OAAO,CAACe,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IAErE,IAAMf,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,MAAMP,YAAY,oJAQhB,CACEI,OAAO,CAACK,IAAI,EACZL,OAAO,CAACM,WAAW,IAAI,IAAI,EAC3BN,OAAO,CAACO,QAAQ,IAAI,IAAI,EACxBP,OAAO,CAACQ,SAAS,IAAI,IAAI,EACzBP,GAAG,EACHD,OAAO,CAACe,EAAE,CAEd,CAAC;EACH,CAAC;EAAA,gBArBYF,aAAaA,CAAAI,GAAA;IAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAqBzB;AAED,OAAO,IAAMM,aAAa;EAAA,IAAAC,KAAA,GAAApB,iBAAA,CAAG,WAAOgB,EAAU,EAAoB;IAChE,MAAMnB,YAAY,CAAC,mCAAmC,EAAE,CAACmB,EAAE,CAAC,CAAC;EAC/D,CAAC;EAAA,gBAFYG,aAAaA,CAAAE,GAAA;IAAA,OAAAD,KAAA,CAAAR,KAAA,OAAAC,SAAA;EAAA;AAAA,GAEzB;AAED,OAAO,IAAMS,cAAc;EAAA,IAAAC,KAAA,GAAAvB,iBAAA,CAAG,WAAOgB,EAAU,EAA8B;IAC3E,IAAMX,MAAM,SAASR,YAAY,uJAK/B,CAACmB,EAAE,CACL,CAAC;IAED,IAAIX,MAAM,CAACmB,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAI;IACb;IAEA,OAAOpB,MAAM,CAACmB,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;EAAA,gBAdYJ,cAAcA,CAAAK,GAAA;IAAA,OAAAJ,KAAA,CAAAX,KAAA,OAAAC,SAAA;EAAA;AAAA,GAc1B;AAED,OAAO,IAAMe,cAAc;EAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAG,aAAgC;IAC5D,IAAMK,MAAM,SAASR,YAAY,+JAMjC,CAAC;IAED,IAAMiC,QAAmB,GAAG,EAAE;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,MAAM,CAACmB,IAAI,CAACC,MAAM,EAAEM,CAAC,EAAE,EAAE;MAC3CD,QAAQ,CAACE,IAAI,CAAC3B,MAAM,CAACmB,IAAI,CAACE,IAAI,CAACK,CAAC,CAAY,CAAC;IAC/C;IAEA,OAAOD,QAAQ;EACjB,CAAC;EAAA,gBAfYF,cAAcA,CAAA;IAAA,OAAAC,KAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAe1B","ignoreList":[]},"metadata":{},"sourceType":"module"}