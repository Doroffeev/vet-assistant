{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { initDatabase } from \"../database/DatabaseService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DatabaseContext = createContext({\n  isDbReady: false,\n  refreshDb: function refreshDb() {}\n});\nexport var useDatabase = function useDatabase() {\n  return useContext(DatabaseContext);\n};\nexport var DatabaseProvider = function DatabaseProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDbReady = _useState2[0],\n    setIsDbReady = _useState2[1];\n  useEffect(function () {\n    var setupDb = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        console.log('DatabaseProvider: Starting database initialization');\n        try {\n          yield initDatabase();\n          console.log('DatabaseProvider: Database initialized successfully');\n          setIsDbReady(true);\n        } catch (error) {\n          console.error('DatabaseProvider: Failed to initialize database:', error);\n        }\n      });\n      return function setupDb() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    setupDb();\n  }, []);\n  var refreshDb = function refreshDb() {\n    setIsDbReady(false);\n    var setupDb = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        try {\n          yield initDatabase();\n          setIsDbReady(true);\n        } catch (error) {\n          console.error('Failed to reinitialize database:', error);\n        }\n      });\n      return function setupDb() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    setupDb();\n  };\n  return _jsx(DatabaseContext.Provider, {\n    value: {\n      isDbReady: isDbReady,\n      refreshDb: refreshDb\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","initDatabase","jsx","_jsx","DatabaseContext","isDbReady","refreshDb","useDatabase","DatabaseProvider","_ref","children","_useState","_useState2","_slicedToArray","setIsDbReady","setupDb","_ref2","_asyncToGenerator","console","log","error","apply","arguments","_ref3","Provider","value"],"sources":["C:/vet-assistant/src/context/DatabaseContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { initDatabase } from '../database/DatabaseService';\r\n\r\ninterface DatabaseContextType {\r\n  isDbReady: boolean;\r\n  refreshDb: () => void;\r\n}\r\n\r\nconst DatabaseContext = createContext<DatabaseContextType>({\r\n  isDbReady: false,\r\n  refreshDb: () => {},\r\n});\r\n\r\nexport const useDatabase = () => useContext(DatabaseContext);\r\n\r\ninterface DatabaseProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const DatabaseProvider: React.FC<DatabaseProviderProps> = ({ children }) => {\r\n  const [isDbReady, setIsDbReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const setupDb = async () => {\r\n      console.log('DatabaseProvider: Starting database initialization');\r\n      try {\r\n        await initDatabase();\r\n        console.log('DatabaseProvider: Database initialized successfully');\r\n        setIsDbReady(true);\r\n      } catch (error) {\r\n        console.error('DatabaseProvider: Failed to initialize database:', error);\r\n      }\r\n    };\r\n\r\n    setupDb();\r\n  }, []);\r\n\r\n  const refreshDb = () => {\r\n    setIsDbReady(false);\r\n    const setupDb = async () => {\r\n      try {\r\n        await initDatabase();\r\n        setIsDbReady(true);\r\n      } catch (error) {\r\n        console.error('Failed to reinitialize database:', error);\r\n      }\r\n    };\r\n    setupDb();\r\n  };\r\n\r\n  return (\r\n    <DatabaseContext.Provider value={{ isDbReady, refreshDb }}>\r\n      {children}\r\n    </DatabaseContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,YAAY;AAAsC,SAAAC,GAAA,IAAAC,IAAA;AAO3D,IAAMC,eAAe,GAAGP,aAAa,CAAsB;EACzDQ,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,SAAXA,SAASA,CAAA,EAAQ,CAAC;AACpB,CAAC,CAAC;AAEF,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA;EAAA,OAAST,UAAU,CAACM,eAAe,CAAC;AAAA;AAM5D,OAAO,IAAMI,gBAAiD,GAAG,SAApDA,gBAAiDA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAC1E,IAAAC,SAAA,GAAkCZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1CN,SAAS,GAAAO,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9BZ,SAAS,CAAC,YAAM;IACd,IAAMe,OAAO;MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;QAC1BC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjE,IAAI;UACF,MAAMlB,YAAY,CAAC,CAAC;UACpBiB,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;UAClEL,YAAY,CAAC,IAAI,CAAC;QACpB,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;QAC1E;MACF,CAAC;MAAA,gBATKL,OAAOA,CAAA;QAAA,OAAAC,KAAA,CAAAK,KAAA,OAAAC,SAAA;MAAA;IAAA,GASZ;IAEDP,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMT,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACtBQ,YAAY,CAAC,KAAK,CAAC;IACnB,IAAMC,OAAO;MAAA,IAAAQ,KAAA,GAAAN,iBAAA,CAAG,aAAY;QAC1B,IAAI;UACF,MAAMhB,YAAY,CAAC,CAAC;UACpBa,YAAY,CAAC,IAAI,CAAC;QACpB,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;MACF,CAAC;MAAA,gBAPKL,OAAOA,CAAA;QAAA,OAAAQ,KAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;IAAA,GAOZ;IACDP,OAAO,CAAC,CAAC;EACX,CAAC;EAED,OACEZ,IAAA,CAACC,eAAe,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,SAAS,EAATA,SAAS;MAAEC,SAAS,EAATA;IAAU,CAAE;IAAAI,QAAA,EACvDA;EAAQ,CACe,CAAC;AAE/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}