{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { executeQuery } from \"../DatabaseService\";\nexport var addVaccine = function () {\n  var _ref = _asyncToGenerator(function* (vaccine) {\n    var now = new Date().toISOString();\n    var result = yield executeQuery(\"INSERT INTO vaccines (\\n      name, manufacturer, dosage, instructions, created_at, updated_at\\n    ) VALUES (?, ?, ?, ?, ?, ?)\", [vaccine.name, vaccine.manufacturer || null, vaccine.dosage || null, vaccine.instructions || null, now, now]);\n    return result.insertId;\n  });\n  return function addVaccine(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateVaccine = function () {\n  var _ref2 = _asyncToGenerator(function* (vaccine) {\n    if (!vaccine.id) throw new Error('Vaccine ID is required for update');\n    var now = new Date().toISOString();\n    yield executeQuery(\"UPDATE vaccines SET\\n      name = ?,\\n      manufacturer = ?,\\n      dosage = ?,\\n      instructions = ?,\\n      updated_at = ?\\n    WHERE id = ?\", [vaccine.name, vaccine.manufacturer || null, vaccine.dosage || null, vaccine.instructions || null, now, vaccine.id]);\n  });\n  return function updateVaccine(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteVaccine = function () {\n  var _ref3 = _asyncToGenerator(function* (id) {\n    yield executeQuery('DELETE FROM vaccines WHERE id = ?', [id]);\n  });\n  return function deleteVaccine(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getVaccineById = function () {\n  var _ref4 = _asyncToGenerator(function* (id) {\n    var result = yield executeQuery(\"SELECT \\n      id, name, manufacturer, dosage, instructions,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM vaccines WHERE id = ?\", [id]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n    return result.rows.item(0);\n  });\n  return function getVaccineById(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllVaccines = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var result = yield executeQuery(\"SELECT \\n      id, name, manufacturer, dosage, instructions,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM vaccines\\n    ORDER BY name ASC\");\n    var vaccines = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      vaccines.push(result.rows.item(i));\n    }\n    return vaccines;\n  });\n  return function getAllVaccines() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["executeQuery","addVaccine","_ref","_asyncToGenerator","vaccine","now","Date","toISOString","result","name","manufacturer","dosage","instructions","insertId","_x","apply","arguments","updateVaccine","_ref2","id","Error","_x2","deleteVaccine","_ref3","_x3","getVaccineById","_ref4","rows","length","item","_x4","getAllVaccines","_ref5","vaccines","i","push"],"sources":["C:/vet-assistant/src/database/repositories/VaccineRepository.ts"],"sourcesContent":["// src/database/repositories/VaccineRepository.ts\r\nimport { executeQuery } from '../DatabaseService';\r\nimport { Vaccine } from '../../types';\r\n\r\nexport const addVaccine = async (vaccine: Omit<Vaccine, 'id'>): Promise<number> => {\r\n  const now = new Date().toISOString();\r\n  const result = await executeQuery(\r\n    `INSERT INTO vaccines (\r\n      name, manufacturer, dosage, instructions, created_at, updated_at\r\n    ) VALUES (?, ?, ?, ?, ?, ?)`,\r\n    [\r\n      vaccine.name,\r\n      vaccine.manufacturer || null,\r\n      vaccine.dosage || null,\r\n      vaccine.instructions || null,\r\n      now,\r\n      now\r\n    ]\r\n  );\r\n  \r\n  return result.insertId;\r\n};\r\n\r\nexport const updateVaccine = async (vaccine: Vaccine): Promise<void> => {\r\n  if (!vaccine.id) throw new Error('Vaccine ID is required for update');\r\n  \r\n  const now = new Date().toISOString();\r\n  await executeQuery(\r\n    `UPDATE vaccines SET\r\n      name = ?,\r\n      manufacturer = ?,\r\n      dosage = ?,\r\n      instructions = ?,\r\n      updated_at = ?\r\n    WHERE id = ?`,\r\n    [\r\n      vaccine.name,\r\n      vaccine.manufacturer || null,\r\n      vaccine.dosage || null,\r\n      vaccine.instructions || null,\r\n      now,\r\n      vaccine.id\r\n    ]\r\n  );\r\n};\r\n\r\nexport const deleteVaccine = async (id: number): Promise<void> => {\r\n  await executeQuery('DELETE FROM vaccines WHERE id = ?', [id]);\r\n};\r\n\r\nexport const getVaccineById = async (id: number): Promise<Vaccine | null> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, manufacturer, dosage, instructions,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM vaccines WHERE id = ?`,\r\n    [id]\r\n  );\r\n  \r\n  if (result.rows.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return result.rows.item(0) as Vaccine;\r\n};\r\n\r\nexport const getAllVaccines = async (): Promise<Vaccine[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, manufacturer, dosage, instructions,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM vaccines\r\n    ORDER BY name ASC`\r\n  );\r\n  \r\n  const vaccines: Vaccine[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    vaccines.push(result.rows.item(i) as Vaccine);\r\n  }\r\n  \r\n  return vaccines;\r\n};"],"mappings":";AACA,SAASA,YAAY;AAGrB,OAAO,IAAMC,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAA4B,EAAsB;IACjF,IAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,IAAMC,MAAM,SAASR,YAAY,oIAI/B,CACEI,OAAO,CAACK,IAAI,EACZL,OAAO,CAACM,YAAY,IAAI,IAAI,EAC5BN,OAAO,CAACO,MAAM,IAAI,IAAI,EACtBP,OAAO,CAACQ,YAAY,IAAI,IAAI,EAC5BP,GAAG,EACHA,GAAG,CAEP,CAAC;IAED,OAAOG,MAAM,CAACK,QAAQ;EACxB,CAAC;EAAA,gBAjBYZ,UAAUA,CAAAa,EAAA;IAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiBtB;AAED,OAAO,IAAMC,aAAa;EAAA,IAAAC,KAAA,GAAAf,iBAAA,CAAG,WAAOC,OAAgB,EAAoB;IACtE,IAAI,CAACA,OAAO,CAACe,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IAErE,IAAMf,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,MAAMP,YAAY,sJAQhB,CACEI,OAAO,CAACK,IAAI,EACZL,OAAO,CAACM,YAAY,IAAI,IAAI,EAC5BN,OAAO,CAACO,MAAM,IAAI,IAAI,EACtBP,OAAO,CAACQ,YAAY,IAAI,IAAI,EAC5BP,GAAG,EACHD,OAAO,CAACe,EAAE,CAEd,CAAC;EACH,CAAC;EAAA,gBArBYF,aAAaA,CAAAI,GAAA;IAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAqBzB;AAED,OAAO,IAAMM,aAAa;EAAA,IAAAC,KAAA,GAAApB,iBAAA,CAAG,WAAOgB,EAAU,EAAoB;IAChE,MAAMnB,YAAY,CAAC,mCAAmC,EAAE,CAACmB,EAAE,CAAC,CAAC;EAC/D,CAAC;EAAA,gBAFYG,aAAaA,CAAAE,GAAA;IAAA,OAAAD,KAAA,CAAAR,KAAA,OAAAC,SAAA;EAAA;AAAA,GAEzB;AAED,OAAO,IAAMS,cAAc;EAAA,IAAAC,KAAA,GAAAvB,iBAAA,CAAG,WAAOgB,EAAU,EAA8B;IAC3E,IAAMX,MAAM,SAASR,YAAY,yJAK/B,CAACmB,EAAE,CACL,CAAC;IAED,IAAIX,MAAM,CAACmB,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAI;IACb;IAEA,OAAOpB,MAAM,CAACmB,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;EAAA,gBAdYJ,cAAcA,CAAAK,GAAA;IAAA,OAAAJ,KAAA,CAAAX,KAAA,OAAAC,SAAA;EAAA;AAAA,GAc1B;AAED,OAAO,IAAMe,cAAc;EAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAG,aAAgC;IAC5D,IAAMK,MAAM,SAASR,YAAY,iKAMjC,CAAC;IAED,IAAMiC,QAAmB,GAAG,EAAE;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,MAAM,CAACmB,IAAI,CAACC,MAAM,EAAEM,CAAC,EAAE,EAAE;MAC3CD,QAAQ,CAACE,IAAI,CAAC3B,MAAM,CAACmB,IAAI,CAACE,IAAI,CAACK,CAAC,CAAY,CAAC;IAC/C;IAEA,OAAOD,QAAQ;EACjB,CAAC;EAAA,gBAfYF,cAAcA,CAAA;IAAA,OAAAC,KAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAe1B","ignoreList":[]},"metadata":{},"sourceType":"module"}