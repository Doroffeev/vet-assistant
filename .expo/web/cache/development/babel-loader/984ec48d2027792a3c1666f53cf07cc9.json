{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { executeQuery } from \"../DatabaseService\";\nexport var addExecutor = function () {\n  var _ref = _asyncToGenerator(function* (executor) {\n    var now = new Date().toISOString();\n    var result = yield executeQuery(\"INSERT INTO executors (\\n      name, position, contact, notes, created_at, updated_at\\n    ) VALUES (?, ?, ?, ?, ?, ?)\", [executor.name, executor.position || null, executor.contact || null, executor.notes || null, now, now]);\n    return result.insertId;\n  });\n  return function addExecutor(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateExecutor = function () {\n  var _ref2 = _asyncToGenerator(function* (executor) {\n    if (!executor.id) throw new Error('Executor ID is required for update');\n    var now = new Date().toISOString();\n    yield executeQuery(\"UPDATE executors SET\\n      name = ?,\\n      position = ?,\\n      contact = ?,\\n      notes = ?,\\n      updated_at = ?\\n    WHERE id = ?\", [executor.name, executor.position || null, executor.contact || null, executor.notes || null, now, executor.id]);\n  });\n  return function updateExecutor(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteExecutor = function () {\n  var _ref3 = _asyncToGenerator(function* (id) {\n    yield executeQuery('DELETE FROM executors WHERE id = ?', [id]);\n  });\n  return function deleteExecutor(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getExecutorById = function () {\n  var _ref4 = _asyncToGenerator(function* (id) {\n    var result = yield executeQuery(\"SELECT \\n      id, name, position, contact, notes,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM executors WHERE id = ?\", [id]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n    return result.rows.item(0);\n  });\n  return function getExecutorById(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllExecutors = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var result = yield executeQuery(\"SELECT \\n      id, name, position, contact, notes,\\n      created_at as createdAt, updated_at as updatedAt\\n    FROM executors\\n    ORDER BY name ASC\");\n    var executors = [];\n    for (var i = 0; i < result.rows.length; i++) {\n      executors.push(result.rows.item(i));\n    }\n    return executors;\n  });\n  return function getAllExecutors() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["executeQuery","addExecutor","_ref","_asyncToGenerator","executor","now","Date","toISOString","result","name","position","contact","notes","insertId","_x","apply","arguments","updateExecutor","_ref2","id","Error","_x2","deleteExecutor","_ref3","_x3","getExecutorById","_ref4","rows","length","item","_x4","getAllExecutors","_ref5","executors","i","push"],"sources":["C:/vet-assistant/src/database/repositories/ExecutorRepository.ts"],"sourcesContent":["// src/database/repositories/ExecutorRepository.ts\r\nimport { executeQuery } from '../DatabaseService';\r\nimport { Executor } from '../../types';\r\n\r\nexport const addExecutor = async (executor: Omit<Executor, 'id'>): Promise<number> => {\r\n  const now = new Date().toISOString();\r\n  const result = await executeQuery(\r\n    `INSERT INTO executors (\r\n      name, position, contact, notes, created_at, updated_at\r\n    ) VALUES (?, ?, ?, ?, ?, ?)`,\r\n    [\r\n      executor.name,\r\n      executor.position || null,\r\n      executor.contact || null,\r\n      executor.notes || null,\r\n      now,\r\n      now\r\n    ]\r\n  );\r\n  \r\n  return result.insertId;\r\n};\r\n\r\nexport const updateExecutor = async (executor: Executor): Promise<void> => {\r\n  if (!executor.id) throw new Error('Executor ID is required for update');\r\n  \r\n  const now = new Date().toISOString();\r\n  await executeQuery(\r\n    `UPDATE executors SET\r\n      name = ?,\r\n      position = ?,\r\n      contact = ?,\r\n      notes = ?,\r\n      updated_at = ?\r\n    WHERE id = ?`,\r\n    [\r\n      executor.name,\r\n      executor.position || null,\r\n      executor.contact || null,\r\n      executor.notes || null,\r\n      now,\r\n      executor.id\r\n    ]\r\n  );\r\n};\r\n\r\nexport const deleteExecutor = async (id: number): Promise<void> => {\r\n  await executeQuery('DELETE FROM executors WHERE id = ?', [id]);\r\n};\r\n\r\nexport const getExecutorById = async (id: number): Promise<Executor | null> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, position, contact, notes,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM executors WHERE id = ?`,\r\n    [id]\r\n  );\r\n  \r\n  if (result.rows.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return result.rows.item(0) as Executor;\r\n};\r\n\r\nexport const getAllExecutors = async (): Promise<Executor[]> => {\r\n  const result = await executeQuery(\r\n    `SELECT \r\n      id, name, position, contact, notes,\r\n      created_at as createdAt, updated_at as updatedAt\r\n    FROM executors\r\n    ORDER BY name ASC`\r\n  );\r\n  \r\n  const executors: Executor[] = [];\r\n  for (let i = 0; i < result.rows.length; i++) {\r\n    executors.push(result.rows.item(i) as Executor);\r\n  }\r\n  \r\n  return executors;\r\n};\r\n\r\n"],"mappings":";AACA,SAASA,YAAY;AAGrB,OAAO,IAAMC,WAAW;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,QAA8B,EAAsB;IACpF,IAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,IAAMC,MAAM,SAASR,YAAY,2HAI/B,CACEI,QAAQ,CAACK,IAAI,EACbL,QAAQ,CAACM,QAAQ,IAAI,IAAI,EACzBN,QAAQ,CAACO,OAAO,IAAI,IAAI,EACxBP,QAAQ,CAACQ,KAAK,IAAI,IAAI,EACtBP,GAAG,EACHA,GAAG,CAEP,CAAC;IAED,OAAOG,MAAM,CAACK,QAAQ;EACxB,CAAC;EAAA,gBAjBYZ,WAAWA,CAAAa,EAAA;IAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiBvB;AAED,OAAO,IAAMC,cAAc;EAAA,IAAAC,KAAA,GAAAf,iBAAA,CAAG,WAAOC,QAAkB,EAAoB;IACzE,IAAI,CAACA,QAAQ,CAACe,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;IAEvE,IAAMf,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,MAAMP,YAAY,6IAQhB,CACEI,QAAQ,CAACK,IAAI,EACbL,QAAQ,CAACM,QAAQ,IAAI,IAAI,EACzBN,QAAQ,CAACO,OAAO,IAAI,IAAI,EACxBP,QAAQ,CAACQ,KAAK,IAAI,IAAI,EACtBP,GAAG,EACHD,QAAQ,CAACe,EAAE,CAEf,CAAC;EACH,CAAC;EAAA,gBArBYF,cAAcA,CAAAI,GAAA;IAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAqB1B;AAED,OAAO,IAAMM,cAAc;EAAA,IAAAC,KAAA,GAAApB,iBAAA,CAAG,WAAOgB,EAAU,EAAoB;IACjE,MAAMnB,YAAY,CAAC,oCAAoC,EAAE,CAACmB,EAAE,CAAC,CAAC;EAChE,CAAC;EAAA,gBAFYG,cAAcA,CAAAE,GAAA;IAAA,OAAAD,KAAA,CAAAR,KAAA,OAAAC,SAAA;EAAA;AAAA,GAE1B;AAED,OAAO,IAAMS,eAAe;EAAA,IAAAC,KAAA,GAAAvB,iBAAA,CAAG,WAAOgB,EAAU,EAA+B;IAC7E,IAAMX,MAAM,SAASR,YAAY,gJAK/B,CAACmB,EAAE,CACL,CAAC;IAED,IAAIX,MAAM,CAACmB,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAI;IACb;IAEA,OAAOpB,MAAM,CAACmB,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;EAAA,gBAdYJ,eAAeA,CAAAK,GAAA;IAAA,OAAAJ,KAAA,CAAAX,KAAA,OAAAC,SAAA;EAAA;AAAA,GAc3B;AAED,OAAO,IAAMe,eAAe;EAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAG,aAAiC;IAC9D,IAAMK,MAAM,SAASR,YAAY,wJAMjC,CAAC;IAED,IAAMiC,SAAqB,GAAG,EAAE;IAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,MAAM,CAACmB,IAAI,CAACC,MAAM,EAAEM,CAAC,EAAE,EAAE;MAC3CD,SAAS,CAACE,IAAI,CAAC3B,MAAM,CAACmB,IAAI,CAACE,IAAI,CAACK,CAAC,CAAa,CAAC;IACjD;IAEA,OAAOD,SAAS;EAClB,CAAC;EAAA,gBAfYF,eAAeA,CAAA;IAAA,OAAAC,KAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAe3B","ignoreList":[]},"metadata":{},"sourceType":"module"}